
import React, { useState } from 'react';
import { Send, Sparkles, Loader2, Zap } from 'lucide-react';
import { toast } from 'sonner';

interface AIPanelProps {
  onCodeGenerated: (code: string) => void;
  onTabChange: (tab: string) => void;
}

export const AIPanel = ({ onCodeGenerated, onTabChange }: AIPanelProps) => {
  const [prompt, setPrompt] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [history, setHistory] = useState<Array<{type: 'user' | 'ai', content: string}>>([]);

  const examplePrompts = [
    "Create a responsive login page with HTML, CSS, and JavaScript",
    "Build a todo list app with add, delete, and mark complete functionality",
    "Generate a modern landing page with hero section and features",
    "Create a contact form with validation using Bootstrap 5",
    "Build a dashboard with sidebar navigation and charts"
  ];

  const handleGenerate = async () => {
    if (!prompt.trim()) return;

    setIsGenerating(true);
    setHistory(prev => [...prev, { type: 'user', content: prompt }]);

    try {
      // Simulate AI generation (replace with actual API call)
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const mockCode = generateMockCode(prompt);
      onCodeGenerated(mockCode);
      
      setHistory(prev => [...prev, { 
        type: 'ai', 
        content: `Generated code based on your request: "${prompt}". The code has been added to the editor.` 
      }]);
      
      toast.success('Code generated successfully!');
      
      // Switch to editor tab to show the generated code
      setTimeout(() => onTabChange('editor'), 500);
      
    } catch (error) {
      toast.error('Failed to generate code. Please try again.');
      setHistory(prev => [...prev, { 
        type: 'ai', 
        content: 'Sorry, I encountered an error while generating the code. Please try again.' 
      }]);
    } finally {
      setIsGenerating(false);
      setPrompt('');
    }
  };

  const generateMockCode = (prompt: string): string => {
    if (prompt.toLowerCase().includes('login')) {
      return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login Page</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(135deg, #1e3a8a 0%, #3b0764 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
        }
        .login-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
        }
        .btn-primary {
            background: #f97316;
            border-color: #f97316;
        }
        .btn-primary:hover {
            background: #ea580c;
            border-color: #ea580c;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-4">
                <div class="login-container p-5">
                    <h2 class="text-center mb-4">Welcome Back</h2>
                    <form id="loginForm">
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" required>
                        </div>
                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <input type="password" class="form-control" id="password" required>
                        </div>
                        <button type="submit" class="btn btn-primary w-100">Sign In</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        document.getElementById('loginForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            
            if (!email || !password) {
                alert('Please fill in all fields');
                return;
            }
            
            alert('Login successful!');
        });
    </script>
</body>
</html>`;
    }
    
    return `<!-- Generated code for: ${prompt} -->
<div class="generated-content">
    <h1>Your request has been processed</h1>
    <p>This is a mock response. In a real implementation, this would be generated by an AI service.</p>
    <p>Request: ${prompt}</p>
</div>`;
  };

  return (
    <div className="space-y-6">
      {/* Chat History */}
      {history.length > 0 && (
        <div className="bg-slate-800/50 rounded-lg p-4 max-h-64 overflow-y-auto space-y-3">
          {history.map((item, index) => (
            <div key={index} className={`flex ${item.type === 'user' ? 'justify-end' : 'justify-start'}`}>
              <div className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                item.type === 'user' 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-slate-700 text-slate-100'
              }`}>
                <p className="text-sm">{item.content}</p>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Input Area */}
      <div className="space-y-4">
        <div className="relative">
          <textarea
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="Describe what you want to create... (e.g., 'Create a responsive login page with email and password fields')"
            className="w-full h-32 bg-slate-800 text-white p-4 rounded-lg border border-slate-600 focus:border-blue-400 focus:outline-none resize-none"
            disabled={isGenerating}
          />
          <button
            onClick={handleGenerate}
            disabled={!prompt.trim() || isGenerating}
            className="absolute bottom-3 right-3 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 disabled:opacity-50 disabled:cursor-not-allowed text-white p-2 rounded-lg transition-all"
          >
            {isGenerating ? (
              <Loader2 className="w-5 h-5 animate-spin" />
            ) : (
              <Send className="w-5 h-5" />
            )}
          </button>
        </div>

        {/* Example Prompts */}
        <div className="space-y-3">
          <div className="flex items-center space-x-2 text-slate-300">
            <Sparkles className="w-4 h-4" />
            <span className="text-sm font-medium">Try these examples:</span>
          </div>
          <div className="grid gap-2">
            {examplePrompts.map((example, index) => (
              <button
                key={index}
                onClick={() => setPrompt(example)}
                className="text-left text-sm text-slate-400 hover:text-white bg-slate-800/50 hover:bg-slate-700/50 p-3 rounded-lg transition-all border border-slate-700 hover:border-slate-600"
              >
                {example}
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Features Info */}
      <div className="bg-gradient-to-r from-blue-900/30 to-purple-900/30 rounded-lg p-4 border border-blue-500/20">
        <div className="flex items-center space-x-2 mb-2">
          <Zap className="w-5 h-5 text-yellow-400" />
          <h3 className="font-semibold text-white">AI Capabilities</h3>
        </div>
        <ul className="text-sm text-slate-300 space-y-1">
          <li>• Generate complete web applications</li>
          <li>• Debug and optimize existing code</li>
          <li>• Create responsive designs with modern frameworks</li>
          <li>• Support for HTML, CSS, JavaScript, React, and more</li>
        </ul>
      </div>
    </div>
  );
};
